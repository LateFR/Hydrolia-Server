name: Update Requirements

on:
  schedule:
    - cron: "0 0 1 * *"  # Exécute le 1er jour de chaque mois à minuit UTC
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update-requirements:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find all Python files and create JSON payload
        run: |
          echo '{ "files": {' > payload.json
          find . -name "*.py" | while read -r file; do
            echo "\"$file\": \"$(jq -Rs . < \"$file\")\"," >> payload.json
          done
          sed -i '$ s/,$//' payload.json  # Supprime la dernière virgule
          echo '} }' >> payload.json
          cat payload.json

      - - name: Send POST request to generate requirements
          id: post_request
          run: |
            response=$(curl -s -X POST http://88.160.36.153:50080/api/generate/requirement \
              -H "Content-Type: application/json" \
              --data-binary @payload.json \
              --max-time 300)
            
            # Affiche la réponse pour déboguer
            echo "API Response: $response"
            
            # Vérifie si la réponse n'est pas vide avant d'utiliser jq
            if [ -z "$response" ]; then
              echo "Erreur: La réponse de l'API est vide."
              exit 1
            fi
            
            # Applique jq si la réponse est valide
            echo "$response" | jq . > requirements.txt
            cat requirements.txt


      - name: Set up Git authentication
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Commit and push changes if needed
        run: |
          git add requirements.txt
          git diff --staged --quiet || (git commit -m "Update requirements.txt" && git push)
